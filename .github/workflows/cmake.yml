name: test

on:
  push:
    branches: [ master ]
    paths:
      - 'dependencies/**'
      - 'include/**'
      - 'javaio/**'
      - 'pydip/**'
      - 'src/**'
      - 'viewer/**'
      - 'CMakeLists.txt'
      - '!**/README*'
      - '!**/readme*'
      - '.github/workflows/cmake.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'dependencies/**'
      - 'include/**'
      - 'javaio/**'
      - 'pydip/**'
      - 'src/**'
      - 'viewer/**'
      - 'CMakeLists.txt'
      - '!**/README*'
      - '!**/readme*'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        include:
          - os: windows-latest
            dip_cmake_opts: -A x64 -DDIP_ENABLE_UNICODE=Off -DGLFW_INCLUDE_DIR=${{github.workspace}}/glfw-3.3.5.bin.WIN64/include -DGLFW_LIBRARY=${{github.workspace}}/glfw-3.3.5.bin.WIN64/lib-vc2019/glfw3.lib
            # Windows build must be 64-bit. We're also disabling Unicode because otherwise some tests fail.
      fail-fast: true

    steps:
      - uses: actions/checkout@v2

      - name: Install
        # Install libraries and Python packages we need
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get -y install freeglut3-dev
            python3 -m pip install numpy twine==1.15.0
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install openjdk8 --no-progress --yes
            python -m pip install wheel numpy twine==1.15.0 wget
            python -m wget https://github.com/glfw/glfw/releases/download/3.3.5/glfw-3.3.5.bin.WIN64.zip
            python -c "import zipfile; zip = zipfile.ZipFile('glfw-3.3.5.bin.WIN64.zip', 'r'); zip.extractall()"
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install libomp glfw
            python3 -m pip install numpy twine==1.15.0 delocate
          fi
        shell: bash

      - name: Configure
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{matrix.dip_cmake_opts}} -DDIP_ENABLE_ASSERT=ON -DDIP_PYDIP_WHEEL_INCLUDE_LIBS=ON

      - name: Build
        # TODO: on macOS  there are 3 cores, use them all
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel 2

      - name: Test
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target check

      - name: Package
        # Create the Python distribution wheel
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target bdist_wheel
