# PyDIP 3.0, Python bindings for DIPlib 3.0
#
# (c)2017-2019, Flagship Biosciences, Inc., written by Cris Luengo.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This module is PyDIP, the Python interface to DIPlib.

Currently, most functionality is directly mirrored from the DIPlib
library. That is, function names and signatures are mostly identical to
those in DIPlib. Please see the documentation for DIPlib to learn how
to use these functions, as we haven't ported the documentation yet.
   https://diplib.github.io/diplib-docs/

One addition specific to Python is the dip.Show() function and the
Image.Show() method (these are identical). They display an image to the
current matplotlib window, if matplotlib is installed:
   import PyDIP as dip
   img = dip.ImageReadTIFF('cameraman')
   img.Show()

If DIPviewer is installed, its functionality will be in the PyDIP.viewer
namespace. Use dip.viewer.Show(img).

# Indexing:

Indexing into a Image object works as it does for other array types in
Python:
   img[0]
   img[0:10]
   img[0:-1:2,0:-1:2]

Note that dimensions are ordered in reverse from how NumPy stores them
(the first dimension is horizontal, or x).

Unlike in the C++ API, the square brackets index into spatial dimensions.
To index into tensor dimensions, use the Image.TensorElement method:
   img.TensorElement(0)
   img.TensorElement(0,2)
   img.TensorElement(slice(0,3))

The output of any of these indexing operations shares data with the original
image, so writing to that output also changes the original image:
   img.TensorElement(0).Fill(100)
   img.TensorElement(1).Copy(img.TensorElement(0))

Irregular indexing using a mask image is also supported. This indexing
returns a copy of the data, but an assignment form is also available:
   img2 = img[mask]
   img2.Fill(0)     # does not affect img
   img[mask] = 0    # sets all pixels in mask to 0
"""

# (WINDOWS ONLY) First, we make sure that the DIP.dll file is on the PATH
import os
if os.name == 'nt':
    os.environ["PATH"] += os.pathsep + "@CMAKE_INSTALL_PREFIX@/lib"

# Here we import classes and functions from the binary and the python-code modules into
# the same namespace.
from PyDIP.PyDIP_bin import *
from PyDIP.PyDIP_py import *

# Here we import PyDIPviewer if it exists
hasDIPviewer = False
import importlib.util
if importlib.util.find_spec('PyDIP.PyDIPviewer') is not None:
    import PyDIP.PyDIPviewer as viewer
    hasDIPviewer = True

# Here we import PyDIPjavaio if it exists
hasDIPjavaio = False
if importlib.util.find_spec('PyDIP.PyDIPjavaio') is not None:
    import PyDIP.PyDIPjavaio as javaio
    hasDIPjavaio = True
